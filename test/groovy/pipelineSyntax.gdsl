
//The global script scope
def ctx = context(scope: scriptScope())
contributor(ctx) {
method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', params: [id:'java.lang.String'], doc: 'Add an Embeddable Badge Configuration')
method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'animatedOverlayColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), ], doc: 'Add an Embeddable Badge Configuration')
method(name: 'awaitDeploymentCompletion', type: 'Object', params: [deploymentId:'java.lang.String'], doc: 'Wait for AWS CodeDeploy deployment completion')
method(name: 'awsIdentity', type: 'Object', params: [:], doc: 'Print and return the AWS identity')
method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
method(name: 'cfInvalidate', type: 'Object', namedParams: [parameter(name: 'distribution', type: 'java.lang.String'), parameter(name: 'paths', type: 'Map'), parameter(name: 'waitForCompletion', type: 'boolean'), ], doc: 'Invalidate given paths in CloudFront distribution')
method(name: 'cfnDelete', type: 'Object', params: [stack:'java.lang.String'], doc: 'Delete CloudFormation stack')
method(name: 'cfnDelete', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'long'), parameter(name: 'timeoutInMinutes', type: 'long'), ], doc: 'Delete CloudFormation stack')
method(name: 'cfnDeleteStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Delete CloudFormation Stack Set')
method(name: 'cfnDeleteStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), ], doc: 'Delete CloudFormation Stack Set')
method(name: 'cfnDescribe', type: 'Object', params: [stack:'java.lang.String'], doc: 'Describe outputs of CloudFormation stack')
method(name: 'cfnExecuteChangeSet', type: 'ObreadJSONject', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), ], doc: 'Execute CloudFormation change set')
method(name: 'cfnExports', type: 'Object', params: [:], doc: 'Describe CloudFormation global exports')
method(name: 'cfnUpdateStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Create or Update CloudFormation Stack Set')
method(name: 'cfnUpdateStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'administratorRoleArn', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'executionRoleName', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'operationPreferences', type: 'Map'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation Stack Set')
method(name: 'deployAPI', type: 'Object', namedParams: [parameter(name: 'api', type: 'java.lang.String'), parameter(name: 'stage', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'variables', type: 'Map'), ], doc: 'Deploy the given API Gateway API')
method(name: 'ec2ShareAmi', type: 'Object', params: [:], doc: 'Share an AMI with other accounts')
method(name: 'ec2ShareAmi', type: 'Object', namedParams: [parameter(name: 'accountIds', type: 'Map'), parameter(name: 'amiId', type: 'java.lang.String'), ], doc: 'Share an AMI with other accounts')
method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
method(name: 'ecrLogin', type: 'Object', params: [:], doc: 'Create and return the ECR login string')
method(name: 'ecrLogin', type: 'Object', namedParams: [parameter(name: 'email', type: 'java.lang.Boolean'), ], doc: 'Create and return the ECR login string')
method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
method(name: 'getDatabaseConnection', type: 'Object', params: [body:'Closure'], doc: 'Get Database Connection')
method(name: 'getDatabaseConnection', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'type', type: 'Map'), ], doc: 'Get Database Connection')
method(name: 'gitPush', type: 'Object', namedParams: [parameter(name: 'credentialId', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), ], doc: 'Git push step')
method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'Map'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
method(name: 'invokeLambda', type: 'Object', params: [functionName:'java.lang.String'], doc: 'Invoke a given Lambda function')
method(name: 'invokeLambda', type: 'Object', namedParams: [parameter(name: 'functionName', type: 'java.lang.String'), parameter(name: 'payload', type: 'java.lang.Object'), parameter(name: 'payloadAsString', type: 'java.lang.String'), parameter(name: 'returnValueAsString', type: 'boolean'), ], doc: 'Invoke a given Lambda function')
method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'JIRA: Add a comment to issue(s)')
method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'JIRA: Issue selector')
method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA: Search issues')
method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
method(name: 'listAWSAccounts', type: 'Object', params: [:], doc: 'List all AWS accounts of the organization')
method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'Map'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
method(name: 'logstash', type: 'Object', params: [body:'Closure'], doc: 'Send individual log lines to Logstash')
method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')
method(name: 'publishIssues', type: 'Object', params: [issues:'Map'], doc: 'Publish issues created by a static analysis scan')
method(name: 'publishIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'failedNewAll', type: 'int'), parameter(name: 'failedNewHigh', type: 'int'), parameter(name: 'failedNewLow', type: 'int'), parameter(name: 'failedNewNormal', type: 'int'), parameter(name: 'failedTotalAll', type: 'int'), parameter(name: 'failedTotalHigh', type: 'int'), parameter(name: 'failedTotalLow', type: 'int'), parameter(name: 'failedTotalNormal', type: 'int'), parameter(name: 'healthy', type: 'int'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ignoreFailedBuilds', type: 'boolean'), parameter(name: 'ignoreQualityGate', type: 'boolean'), parameter(name: 'minimumSeverity', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'qualityGates', type: 'Map'), parameter(name: 'referenceJobName', type: 'java.lang.String'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'unhealthy', type: 'int'), parameter(name: 'unstableNewAll', type: 'int'), parameter(name: 'unstableNewHigh', type: 'int'), parameter(name: 'unstableNewLow', type: 'int'), parameter(name: 'unstableNewNormal', type: 'int'), parameter(name: 'unstableTotalAll', type: 'int'), parameter(name: 'unstableTotalHigh', type: 'int'), parameter(name: 'unstableTotalLow', type: 'int'), parameter(name: 'unstableTotalNormal', type: 'int'), ], doc: 'Publish issues created by a static analysis scan')
method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
method(name: 's3Copy', type: 'Object', namedParams: [parameter(name: 'fromBucket', type: 'java.lang.String'), parameter(name: 'fromPath', type: 'java.lang.String'), parameter(name: 'toBucket', type: 'java.lang.String'), parameter(name: 'toPath', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'sseAlgorithm', type: 'java.lang.String'), ], doc: 'Copy file between S3 buckets')
method(name: 's3Delete', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Delete file from S3')
method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
method(name: 'sendCIMessage', type: 'Object', namedParams: [parameter(name: 'providerName', type: 'java.lang.String'), parameter(name: 'overrides', type: 'Map'), parameter(name: 'messageType', type: 'Map'), parameter(name: 'messageProperties', type: 'java.lang.String'), parameter(name: 'messageContent', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'java.lang.Boolean'), ], doc: 'CI Notifier')
method(name: 'sendCamelMessage', type: 'Object', namedParams: [parameter(name: 'to', type: 'java.lang.String'), parameter(name: 'nessageBody', type: 'java.lang.String')])
method(name: 'CamelTrigger', type: 'Object', namedParams: [parameter(name: 'from', type: 'Map')])
method(name: 'setAccountAlias', type: 'Object', params: [name:'java.lang.String'], doc: 'Set the AWS account alias')
method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
method(name: 'snsPublish', type: 'Object', namedParams: [parameter(name: 'topicArn', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'messageAttributes', type: 'Map'), ], doc: 'Publish notification to SNS')
method(name: 'sql', type: 'Object', params: [sql:'java.lang.String'], doc: 'Run SQL')
method(name: 'sql', type: 'Object', namedParams: [parameter(name: 'sql', type: 'java.lang.String'), parameter(name: 'connection', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), ], doc: 'Run SQL')
method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
method(name: 'throttle', type: 'Object', params: [categories:Map, body:'Closure'], doc: 'Throttle execution of node blocks within this body')
method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'waitForCIMessage', type: 'Object', namedParams: [parameter(name: 'providerName', type: 'java.lang.String'), parameter(name: 'overrides', type: 'Map'), parameter(name: 'selector', type: 'java.lang.String'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'checks', type: 'Map'), ], doc: 'CI Subscriber')
method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
method(name: 'withAWS', type: 'Object', params: [body:'Closure'], doc: 'set AWS settings for nested block')
method(name: 'withAWS', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.lang.String'), parameter(name: 'duration', type: 'java.lang.Integer'), parameter(name: 'endpointUrl', type: 'java.lang.String'), parameter(name: 'externalId', type: 'java.lang.String'), parameter(name: 'federatedUserId', type: 'java.lang.String'), parameter(name: 'iamMfaToken', type: 'java.lang.String'), parameter(name: 'policy', type: 'java.lang.String'), parameter(name: 'principalArn', type: 'java.lang.String'), parameter(name: 'profile', type: 'java.lang.String'), parameter(name: 'region', type: 'java.lang.String'), parameter(name: 'role', type: 'java.lang.String'), parameter(name: 'roleAccount', type: 'java.lang.String'), parameter(name: 'roleSessionName', type: 'java.lang.String'), parameter(name: 'samlAssertion', type: 'java.lang.String'), ], doc: 'set AWS settings for nested block')
method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')
method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')
method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
method(name: 'podTemplate', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'activeDeadlineSeconds', type: 'int'), parameter(name: 'annotations', type: 'Map'), parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'containers', type: 'Map'), parameter(name: 'envVars', type: 'Map'), parameter(name: 'idleMinutes', type: 'int'), parameter(name: 'imagePullSecrets', type: 'Map'), parameter(name: 'inheritFrom', type: 'java.lang.String'), parameter(name: 'instanceCap', type: 'int'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'nodeSelector', type: 'java.lang.String'), parameter(name: 'nodeUsageMode', type: 'Map'), parameter(name: 'podRetention', type: 'Map'), parameter(name: 'serviceAccount', type: 'java.lang.String'), parameter(name: 'slaveConnectTimeout', type: 'int'), parameter(name: 'volumes', type: 'Map'), parameter(name: 'workingDir', type: 'java.lang.String'), parameter(name: 'workspaceVolume', type: 'Map'), parameter(name: 'yaml', type: 'java.lang.String'), ], doc: 'Define a podTemplate to use in the kubernetes plugin')
method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
property(name: 'publishConfluence', type: 'com.myyearbook.hudson.plugins.confluence.ConfluenceDSL')
property(name: 'openshift', type: 'com.openshift.jenkins.plugins.pipeline.OpenShiftGlobalVariable')
property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
method(name: 'cfnCreateChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create CloudFormation change set')
method(name: 'cfnUpdate', type: 'Object', params: [stack:'java.lang.String'], doc: 'Create or Update CloudFormation stack')
method(name: 'cfnUpdate', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'enableTerminationProtection', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation stack')
method(name: 'cfnValidate', type: 'Object', params: [:], doc: 'Validate CloudFormation template')
method(name: 'cfnValidate', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Validate CloudFormation template')
method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Check out from version control')
method(name: 'containerLog', type: 'Object', params: [name:'java.lang.String'], doc: 'Get container log from Kubernetes')
method(name: 'containerLog', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'limitBytes', type: 'int'), parameter(name: 'returnLog', type: 'boolean'), parameter(name: 'sinceSeconds', type: 'int'), parameter(name: 'tailingLines', type: 'int'), ], doc: 'Get container log from Kubernetes')
method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), ], doc: 'Archive JUnit-formatted test results')
method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
method(name: 'openshiftBuild', type: 'Object', params: [bldCfg:'java.lang.String'], doc: 'Trigger OpenShift Build')
method(name: 'openshiftBuild', type: 'Object', namedParams: [parameter(name: 'bldCfg', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'checkForTriggeredDeployments', type: 'java.lang.String'), parameter(name: 'commitID', type: 'java.lang.String'), parameter(name: 'env', type: 'Map'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'showBuildLogs', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), parameter(name: 'waitTime', type: 'java.lang.String'), parameter(name: 'waitUnit', type: 'java.lang.String'), ], doc: 'Trigger OpenShift Build')
method(name: 'openshiftCreateResource', type: 'Object', params: [jsonyaml:'java.lang.String'], doc: 'Create OpenShift Resource(s)')
method(name: 'openshiftCreateResource', type: 'Object', namedParams: [parameter(name: 'jsonyaml', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'Create OpenShift Resource(s)')
method(name: 'openshiftDeleteResourceByJsonYaml', type: 'Object', params: [jsonyaml:'java.lang.String'], doc: 'Delete OpenShift Resource(s) from JSON or YAML')
method(name: 'openshiftDeleteResourceByJsonYaml', type: 'Object', namedParams: [parameter(name: 'jsonyaml', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'Delete OpenShift Resource(s) from JSON or YAML')
method(name: 'openshiftDeleteResourceByKey', type: 'Object', namedParams: [parameter(name: 'types', type: 'java.lang.String'), parameter(name: 'keys', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'Delete OpenShift Resource(s) by Key')
method(name: 'openshiftDeleteResourceByLabels', type: 'Object', namedParams: [parameter(name: 'types', type: 'java.lang.String'), parameter(name: 'keys', type: 'java.lang.String'), parameter(name: 'values', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'Delete OpenShift Resource(s) using Labels')
method(name: 'openshiftDeploy', type: 'Object', params: [depCfg:'java.lang.String'], doc: 'Trigger OpenShift Deployment')
method(name: 'openshiftDeploy', type: 'Object', namedParams: [parameter(name: 'depCfg', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), parameter(name: 'waitTime', type: 'java.lang.String'), parameter(name: 'waitUnit', type: 'java.lang.String'), ], doc: 'Trigger OpenShift Deployment')
method(name: 'openshiftExec', type: 'Object', params: [pod:'java.lang.String'], doc: 'OpenShift Exec')
method(name: 'openshiftExec', type: 'Object', namedParams: [parameter(name: 'pod', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'arguments', type: 'Map'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'container', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), parameter(name: 'waitTime', type: 'java.lang.String'), parameter(name: 'waitUnit', type: 'java.lang.String'), ], doc: 'OpenShift Exec')
method(name: 'openshiftImageStream', type: 'Object', params: [:], doc: 'OpenShift ImageStreams')
method(name: 'openshiftImageStream', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'tag', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'OpenShift ImageStreams')
method(name: 'openshiftScale', type: 'Object', namedParams: [parameter(name: 'depCfg', type: 'java.lang.String'), parameter(name: 'replicaCount', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), parameter(name: 'verifyReplicaCount', type: 'java.lang.String'), parameter(name: 'waitTime', type: 'java.lang.String'), parameter(name: 'waitUnit', type: 'java.lang.String'), ], doc: 'Scale OpenShift Deployment')
method(name: 'openshiftTag', type: 'Object', namedParams: [parameter(name: 'srcStream', type: 'java.lang.String'), parameter(name: 'srcTag', type: 'java.lang.String'), parameter(name: 'destStream', type: 'java.lang.String'), parameter(name: 'destTag', type: 'java.lang.String'), parameter(name: 'alias', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'destinationAuthToken', type: 'java.lang.String'), parameter(name: 'destinationNamespace', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'Tag OpenShift Image')
method(name: 'openshiftVerifyBuild', type: 'Object', params: [bldCfg:'java.lang.String'], doc: 'Verify OpenShift Build')
method(name: 'openshiftVerifyBuild', type: 'Object', namedParams: [parameter(name: 'bldCfg', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'checkForTriggeredDeployments', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), parameter(name: 'waitTime', type: 'java.lang.String'), parameter(name: 'waitUnit', type: 'java.lang.String'), ], doc: 'Verify OpenShift Build')
method(name: 'openshiftVerifyDeployment', type: 'Object', params: [depCfg:'java.lang.String'], doc: 'Verify OpenShift Deployment')
method(name: 'openshiftVerifyDeployment', type: 'Object', namedParams: [parameter(name: 'depCfg', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'replicaCount', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), parameter(name: 'verifyReplicaCount', type: 'java.lang.String'), parameter(name: 'waitTime', type: 'java.lang.String'), parameter(name: 'waitUnit', type: 'java.lang.String'), ], doc: 'Verify OpenShift Deployment')
method(name: 'openshiftVerifyService', type: 'Object', params: [svcName:'java.lang.String'], doc: 'Verify OpenShift Service')
method(name: 'openshiftVerifyService', type: 'Object', namedParams: [parameter(name: 'svcName', type: 'java.lang.String'), parameter(name: 'apiURL', type: 'java.lang.String'), parameter(name: 'authToken', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'retryCount', type: 'java.lang.String'), parameter(name: 'verbose', type: 'java.lang.String'), ], doc: 'Verify OpenShift Service')
method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Script')
method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
method(name: 's3Download', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'force', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Copy file from S3')
method(name: 's3FindFiles', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Find files in S3')
method(name: 's3FindFiles', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'onlyFiles', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Find files in S3')
method(name: 's3PresignURL', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'key', type: 'java.lang.String'), parameter(name: 'httpMethod', type: 'java.lang.String'), parameter(name: 'durationInSeconds', type: 'java.lang.Integer'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Presign file in S3')
method(name: 's3Upload', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Copy file to S3')
method(name: 's3Upload', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentEncoding', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'excludePathPattern', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'includePathPattern', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'sseAlgorithm', type: 'java.lang.String'), parameter(name: 'workingDir', type: 'java.lang.String'), ], doc: 'Copy file to S3')
method(name: 'scanForIssues', type: 'Object', params: [:], doc: 'Scan files or the console log for warnings or issues')
method(name: 'scanForIssues', type: 'Object', namedParams: [parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'filters', type: 'Map'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'tool', type: 'Map'), ], doc: 'Scan files or the console log for warnings or issues')
method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
method(name: 'sshagent', type: 'Object', params: [credentials:Map, body:'Closure'], doc: 'SSH Agent')
method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'Map'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
method(name: 'updateIdP', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'metadata', type: 'java.lang.String'), ], doc: 'Update thirdparty Identity Provider')
method(name: 'updateTrustPolicy', type: 'Object', namedParams: [parameter(name: 'roleName', type: 'java.lang.String'), parameter(name: 'policyFile', type: 'java.lang.String'), ], doc: 'Update trust policy of IAM roles')
method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), parameter(name: 'pretty', type: 'int'), ], doc: 'Write JSON to a file in the workspace.')
method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), ], doc: 'Write a yaml from an object.')
method(name: 'xunit', type: 'Object', params: [tools:'Map'], doc: 'Publish xUnit test result report')
method(name: 'xunit', type: 'Object', namedParams: [parameter(name: 'tools', type: 'Map'), parameter(name: 'reduceLog', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), parameter(name: 'testTimeMargin', type: 'java.lang.String'), parameter(name: 'thresholdMode', type: 'int'), parameter(name: 'thresholds', type: 'Map'), ], doc: 'Publish xUnit test result report')
method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
method(name: '_OcAction', type: 'Object', namedParams: [parameter(name: 'server', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'skipTLSVerify', type: 'boolean'), parameter(name: 'caPath', type: 'java.lang.String'), parameter(name: 'verb', type: 'java.lang.String'), parameter(name: 'advArgs', type: 'java.util.List'), parameter(name: 'verbArgs', type: 'java.util.List'), parameter(name: 'userArgs', type: 'java.util.List'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'streamStdOutToConsolePrefix', type: 'java.lang.String'), parameter(name: 'reference', type: 'Map'), parameter(name: 'logLevel', type: 'int'), ], doc: 'Internal utility function for OpenShift DSL')
method(name: '_OcContextInit', type: 'Object', params: [:], doc: 'Advanced/Deprecated Internal utility function for OpenShift DSL')
method(name: '_OcWatch', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'server', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'skipTLSVerify', type: 'boolean'), parameter(name: 'caPath', type: 'java.lang.String'), parameter(name: 'verb', type: 'java.lang.String'), parameter(name: 'advArgs', type: 'java.util.List'), parameter(name: 'verbArgs', type: 'java.util.List'), parameter(name: 'userArgs', type: 'java.util.List'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'logLevel', type: 'int'), ], doc: 'Internal utility function for OpenShift DSL')
method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
method(name: 'container', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps in a container')
method(name: 'container', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'shell', type: 'java.lang.String'), ], doc: 'Run build steps in a container')
method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')
method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }
}

// Errors on:
// class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep: There's no @DataBoundConstructor on any constructor of class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep
